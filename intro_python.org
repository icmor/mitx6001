#+TITLE: Introduction to Computer Science and Programming Using Python

* Unit 1 - Basics
** Computers are fast... but not fast enough (if using simple algorithms)
- 1 Ghz ~ 1,000,000,000 operations per second!
- Naive web word search (45B pages) ~ 5.2 days
** Types of errors:
- Syntactic
- Static Semantic
- Semantic or logic errors
* Unit 2 - Simple Programs
** Guess and Check Algorithms
- Exhaustive Enumeration
- Bisection search
- Newton's Method
** Functions
- Decomposition
- Abstraction
- /Recursion/ is awesome!
* Unit 3 - Structured Types
*** Collections support unpacking
- Return multiple values from a function
- Assign multiple variables at once
- \*args and \*kwargs
** Lists
*** Copying
- l2 = l1 (same object, same references for elements)
- l2 = l1[:] (new object, same references for elements)
- l2 = l1.copy() (same as l1[:])
- l2 = copy.deepcopy(l1) (new object, new elements)
** Functions are first class citizens
- Higher Order Procedures = accept or return functions
** Dictionaries
- Mutable
- Keys (inmutable) - dict.keys()
- Values - dict.values()
- dict.items() -> (key, value)
- /Memoization/ is awesome!
* Unit 4 - Good Programming Practices
** Defensive Programming
- Modularity
- Specifications
- Assertions
** Testing
*** Types
- Unit Testing
- Regression Testing
- Integration Testing
*** Approaches
**** Black Box Testing
**** Glass Box Testing
Loops, branches and recursion
- Not run
- Run once
- Run multiple times
** Debugging
- Good ol' print
- Bisection
- Rubber Ducky ðŸ¦†
*** Scientific Method
1. Observation
2. Hypothesis (inductive reasoning)
3. Testing (deductive reasoning)
4. Repeat
** EAFP - easier to ask for forgiveness than permission
- Use try except
- Assumes existence of valid info
- Faster than conditionals if exceptions are uncommon
* Unit 5 - Object Oriented Programming
*Everything in Python is an object*
** Advantages of OOP
- Bundle data and procedures with well-defined interfaces
- Abstraction
- Modularity
  - Inheritance
  - Namespaces
** @property decorator
- Python's way of doing getters and setters
** Method Resolution Order (C3)
** Class variables
- Defined outside any methods and shared among all instances
* Unit 6 - Algorithmic Complexity
** Order of Growth - Big Oh Notation
- Rate of growth relative to the input
- Worst case scenario
*** Orders of growth
- Constant: O(1)
- Logarithmic: O(logn)
- Linear: O(n)
- Loglinear: O(nlogn)
- Polynomial: O(n^c)
- Exponential O(c^n)
** Sorting Algorithms
- Bubble sort = O(n^2)
- Selection sort = O(n^2)
- Merge sort = O(nlogn)
